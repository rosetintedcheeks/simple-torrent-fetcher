#!/usr/bin/python3
import os
import re
import sys
from datetime import datetime

import feedparser
import libtorrent
import requests
import yaml

# unsafe loader doesn't matter probably
# TODO: probably should fix this
yaml.warnings({'YAMLLoadWarning': False})

url = ""
watch_dir = ""
link_dir = ""
home = ""
show_dir = ""

regex_root = ""

line_num = 0
shows = []
auto = False
config_file = "scheduler.yaml"
config_base = "config_files"
verbose = False

config_file = config_base + "/" + config_file

os.chdir(os.path.dirname(os.path.abspath(__file__)))

for k, v in enumerate(sys.argv):
    if v == "-a":
        auto = True
    if v == "--config":
        config_file = config_base + "/" + sys.argv[k + 1]
    if v == "-h":
        print("--config [config_file]")
        exit()
    if v == "-v":
        verbose = True

with open(home + config_file, "r") as cf:
    i = False
    for doc in yaml.load_all(cf.read(), Loader=yaml.Loader):
        if not i:
            i = True
            url = doc['url']
            watch_dir = doc['watchdir']
            link_dir = doc['linkeddir']
            show_dir = doc['showdir']
        else:
            shows.append(doc)

if verbose:
    print(shows)
feed_request = requests.get(url)
feed_text = feed_request.text
feed = feedparser.parse(feed_text)
linklist = []
for show in shows:
    matched = open(home + "matched.txt", "r")
    for match in matched:
        if match == (show['regex'] + "\n"):
            show['regex'] = ""
    matched.close()
    if show['regex'] != "":
        show_regex = re.compile(show['regex'])
        for item in feed.entries:
            match = show_regex.fullmatch(item["title"])
            if match is not None:
                try:
                    torrent_url = item.enclosures[0]['href']
                except IndexError:  # Try this if we fail TODO: make a function out of this or something
                    torrent_url = item['link']
                req = requests.get(torrent_url)
                if verbose:
                    print("link from rss feed: " + torrent_url)
                torrent_name = home + watch_dir + "/" + item["title"] + ".torrent"
                if verbose:
                    print("name of downloaded torrent: " + torrent_name)
                torr = open(torrent_name, "wb")
                torrent_bytes = bytearray(req.content)
                torr.write(torrent_bytes)  # Write torrent
                torr.close()
                file_name = libtorrent.torrent_info(torrent_name).files().file_name(0)  # Get name of file
                if verbose:
                    print("name of the file in the torrent:" + file_name)
                link_target = show_dir + '/' + file_name  # Path of file
                if 'sname' in show:
                    full_link_dir = link_dir + '/' + show['sname']  # File will be linked in here
                    if not os.path.isdir(full_link_dir):
                        os.mkdir(full_link_dir)
                    # TODO: get rid of this and do it in another file
                    if 'change' in show and show['change'] != "false":
                        if 'nindex' in show:  # Horrible last resort, could use item title instead
                            enum = int(file_name[int(show['nindex'][0]):int(show['nindex'][1])])
                            if 'nsubtract' in show:
                                enum -= int(show['nsubtract'])
                            file_name = 's' + show['season'] + 'e' + str(enum) + '.mkv'  # :)

                    link_file_name = full_link_dir + '/' + file_name
                    if verbose:
                        print("symlink target: " + link_target)
                        print("symlink path: " + link_file_name)
                    try:
                        os.symlink(link_target, link_file_name)
                    except FileExistsError:
                        pass
                matched = open(home + "matched.txt", "a")
                matched.write(show['regex'] + "\n")
                matched.close()
                log = open(home + "scheduler.log", "a")
                try:
                    log_title = item["title"][int(show['tindex'][0]):int(show['tindex'][1])]
                except ValueError:
                    log_title = item["title"][int(show['tindex'][0]):]
                log_time = datetime.now()
                log_line = log_time.strftime("%x %X") + ": " + log_title + "\n"
                if not auto:
                    log_line = "M " + log_line
                log.write(log_line)
                log.close()
