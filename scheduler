#!/usr/bin/python3
import os
import re
import sys
from datetime import datetime

import feedparser
import libtorrent
import requests
import yaml
from dotenv import load_dotenv

# unsafe loader doesn't matter probably
# TODO: probably should fix this
yaml.warnings({'YAMLLoadWarning': False})

load_dotenv()

url = ""
watchdir = ""

regexroot = ""

home = os.getenv("SCHEDULE_HOME")
showdir = os.getenv("SHOW_DIR")
linkdir = os.getenv("LINK_DIR")

linenum = 0
shows = []
auto = False
configfile = "scheduler.yaml"
namechange = True
verbose = False

for k, v in enumerate(sys.argv):
    if v == "-a":
        auto = True
    if v == "--config":
        configfile = sys.argv[k + 1]
    if v == "-h":
        print("--config [config_file]")
        exit()
    if v == "--linkdir":
        linkdir = sys.argv[k + 1]
    if v == "--no-name-change":
        namechange = False
    if v == "-v":
        verbose = True

with open(home + configfile, "r") as cf:
    i = False
    for doc in yaml.load_all(cf.read(), Loader=yaml.Loader):
        if not i:
            i = True
            url = doc['url']
            watchdir = doc['watchdir']
        else:
            shows.append(doc)

print(shows)
feedreq = requests.get(url)
feedtext = feedreq.text
feed = feedparser.parse(feedtext)
linklist = []
for show in shows:
    matched = open(home + "matched.txt", "r")
    for match in matched:
        if match == (show['regex'] + "\n"):
            show['regex'] = ""
    matched.close()
    if show['regex'] != "":
        showre = re.compile(show['regex'])
        for item in feed.entries:
            match = showre.fullmatch(item["title"])
            if match is not None:
                try:
                    torrent_url = item.enclosures[0]['href']
                except IndexError:  # Try this if we fail TODO: make a function out of this or something
                    torrent_url = item.link
                req = requests.get(torrent_url)
                if verbose:
                    print("link from rss feed: " + torrent_url)
                tname = home + watchdir + "/" + item["title"] + ".torrent"
                if verbose:
                    print("name of downloaded torrent: " + tname)
                torr = open(tname, "wb")
                torrbytes = bytearray(req.content)
                torr.write(torrbytes)  # Write torrent
                torr.close()
                fname = libtorrent.torrent_info(tname).files().file_name(0)  # Get name of file
                if verbose:
                    print("name of the file in the torrent:" + fname)
                fpath = showdir + fname  # Path of file
                if 'sname' in show:
                    ldir = linkdir + show['sname']  # File will be linked in here
                    if not os.path.isdir(ldir):
                        os.mkdir(ldir)
                    # TODO: get rid of this and do it in another file
                    if 'change' in show and show['change'] != "false":
                        if 'nindex' in show:  # Horrible last resort, could use item title instead
                            enum = int(fname[int(show['nindex'][0]):int(show['nindex'][1])])
                            if 'nsubtract' in show:
                                enum -= int(show['nsubtract'])
                            fname = 's' + show['season'] + 'e' + str(enum) + '.mkv'  # :)

                    link_target = ldir + '/' + fname
                    if verbose:
                        print("symlink path: " + fpath)
                        print("symlink target: " + link_target)
                    try:
                        os.symlink(fpath, link_target)
                    except FileExistsError:
                        pass
                matched = open(home + "matched.txt", "a")
                matched.write(show['regex'] + "\n")
                matched.close()
                log = open(home + "scheduler.log", "a")
                try:
                    logtitle = item["title"][int(show['tindex'][0]):int(show['tindex'][1])]
                except ValueError:
                    logtitle = item["title"][int(show['tindex'][0]):]
                logtime = datetime.now()
                logline = logtime.strftime("%x %X") + ": " + logtitle + "\n"
                if not auto:
                    logline = "M " + logline
                log.write(logline)
                log.close()
